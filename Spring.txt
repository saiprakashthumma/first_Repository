Spring :

It was developed by Rod Johnson in 2003. Spring framework makes the easy development of JavaEE application.
Spring is a lightweight framework.
It can be thought of as a framework of frameworks because it provides support to various frameworks such as 
Struts, Hibernate, Tapestry, EJB, JSF, etc. 
The framework, in broader sense, can be defined as a structure where we find solution of the various 
technical problems.

Inversion Of Control (IOC) and Dependency Injection :

These are the design patterns that are used to remove dependency from the programming code. They make the code easier
to test and maintain. 

IOC makes the code loosely coupled. In such case, there is no need to modify the code if our logic is moved to new environment.

In Spring framework, IOC container is responsible to inject the dependency. We provide metadata to the IOC container either by
XML file or annotation

Advantages of Spring Framework :

1) Predefined Templates:
Spring framework provides templates for JDBC, Hibernate, JPA etc. technologies. So there is no need to write too much code. 
It hides the basic steps of these technologies.

2) Loose Coupling:
The Spring applications are loosely coupled because of dependency injection.

3) Easy to test:
The Dependency Injection makes easier to test the application. 

4) Lightweight:
Spring framework is lightweight because of its POJO implementation.

Spring Modules :
The Spring framework comprises of many modules such as core, beans, context, expression language, AOP, Aspects, 
Instrumentation, JDBC, ORM, OXM, JMS, Transaction, Web, Servlet, Struts etc. 
These modules are grouped into Test, Core Container, AOP, Aspects, Instrumentation,
Data Access / Integration, Web (MVC / Remoting) .

Daigram :

Test :

This layer provides support of testing with JUnit and TestNG.

Spring Core Container :
The Spring Core container contains core, beans, context and expression language (EL) modules.

AOP, Aspects and Instrumentation :
These modules support aspect oriented programming implementation where you can use Advices, Pointcuts etc. 
to decouple the code.

The aspects module provides support to integration with AspectJ.

The instrumentation module provides support to class instrumentation and classloader implementations.

Data Access / Integration
This group comprises of JDBC, ORM, OXM, JMS and Transaction modules. 
These modules basically provide support to interact with the database.

Web :

This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. 
These modules provide support to create web application.


IoC Container :
The IoC container is responsible to instantiate, configure and assemble the objects. 
The IoC container gets informations from the XML file and works accordingly. The main tasks performed by IoC container are:

-> to instantiate the application class
-> to configure the object
-> to assemble the dependencies between the objects

There are two types of IoC containers. They are:

1.BeanFactory
2.ApplicationContext

The org.springframework.beans.factory.BeanFactory and the org.springframework.context.ApplicationContext interfaces acts as the IoC 
container. The ApplicationContext interface is built on top of the BeanFactory interface.
It adds some extra functionality than BeanFactory.

Using BeanFactory :
The XmlBeanFactory is the implementation class for the BeanFactory interface. To use the BeanFactory,we need to create the instance 
of XmlBeanFactory class as given below:

Resource resource=new ClassPathResource("applicationContext.xml");  
BeanFactory factory=new XmlBeanFactory(resource);  

The constructor of XmlBeanFactory class receives the Resource object so we need to pass the resource object to create the object 
of BeanFactory.

Using ApplicationContext :
The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext interface. We need to instantiate the 
ClassPathXmlApplicationContext class to use the ApplicationContext as given below:


ApplicationContext context =   
    new ClassPathXmlApplicationContext("applicationContext.xml");  

The constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file 
to create the instance of ApplicationContext.


Dependency Injection in Spring :
Dependency Injection (DI) is a design pattern that removes the dependency from the programming code so that 
it can be easy to manage and test the application. Dependency Injection makes our programming code loosely coupled.
To understand the DI better, Let's understand the Dependency Lookup (DL) first:

Dependency Lookup :
The Dependency Lookup is an approach where we get the resource after demand. There can be various ways to 
get the resource.

Problems of Dependency Lookup
tight coupling : The dependency lookup approach makes the code tightly coupled. If resource is changed, 
		 we need to perform a lot of modification in the code.
Not easy for testing : This approach creates a lot of problems while testing the application especially in black box
		       testing.


The Dependency Injection is a design pattern that removes the dependency of the programs. In such case we provide
the information from the external source such as XML file. It makes our code loosely coupled and easier for testing. 


Two ways to perform Dependency Injection in Spring framework:
By Constructor
By Setter method


There are many key differences between constructor injection and setter injection.

Partial dependency:
can be injected using setter injection but it is not possible by constructor. Suppose there are 3 properties in a 
class, having 3 arg constructor and setters methods. In such case, if you want to pass information for only 
one property, it is possible by setter method only.

Overriding: 
Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container 
will use the setter injection.

Changes:
We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor. 
So setter injection is flexible than constructor injection.

The Spring documentation recommends using constructor-based injection for mandatory dependencies, and setter-based injection 
for optional ones


Autowiring in Spring :

Autowiring feature of spring framework enables you to inject the object dependency implicitly. 
It internally uses setter or constructor injection.

Autowiring can't be used to inject primitive and string values. It works with reference only.

Spring AOP :
Aspect Oriented Programming (AOP) 
AOP breaks the program logic into distinct parts (called concerns). It is used to increase modularity by cross-cutting concerns.

A cross-cutting concern is a concern that can affect the whole application and should be centralized in one location in code as 
possible, such as transaction management, authentication, logging, security etc.

It provides the pluggable way to dynamically add the additional concern before, after or around the actual logic.

Join point
Join point is any point in your program such as method execution, exception handling, field access etc. Spring supports only method 
execution join point.

Advice
Advice represents an action taken by an aspect at a particular join point. There are different types of advices:

Before Advice:		 it executes before a join point.
After Returning Advice:  it executes after a joint point completes normally.
After Throwing Advice:   it executes if method exits by throwing an exception.
After (finally) Advice:  it executes after a join point regardless of join point exit whether normally or exceptional return.
Around Advice:     	 it executes before and after a join point.

Pointcut
It is an expression language of AOP that matches join points.

Aspect
It is a class that contains advices, joinpoints etc.


Spring MVC Tutorial :
A Spring MVC is a Java framework which is used to build web applications. It follows the Model-View-Controller design pattern. 
It implements all the basic features of a core spring framework like Inversion of Control, Dependency Injection.
A Spring MVC provides an elegant solution to use MVC in spring framework by the help of DispatcherServlet. Here, DispatcherServlet 
is a class that receives the incoming request and maps it to the right resource such as controllers, models, and views.








